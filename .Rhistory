madarpontok <- readOGR("legykapokriginghez.shp")
ppont <- dbReadTable(conn,"ppont")
erdoallapot <- data.frame(ppont)
coordinates(erdoallapot) <- ~ wgs84_lon + wgs84_lat
madarpontok_as_grid <- coordinates(madarpontok)
#madarpontok<-data.frame(madarpontok_as_grid)
df.l_pred <- list()
# create matrix of lon,lat,ppont_azon
erdo_matrix <- cbind(coordinates( erdoallapot )[,1:2],erdoallapot$ppont_azon)
erdo.df <- as.data.frame(erdo_matrix)
madar_matrix <- cbind(coordinates( madarpontok_as_grid )[,1:2],rownames(madarpontok))
# order by lon, lat
# to spatial separate the two forest area
#ordered_erdo_matrix <- erdo_matrix[order(erdo_matrix[,1],erdo_matrix[,2],decreasing=F),]
ordered_madar_matrix <- madar_matrix[order(madar_matrix[,1],madar_matrix[,2],decreasing=F),]
madar1szv<-ordered_madar_matrix[1:87,][,1:2]
madar2p<-ordered_madar_matrix[88:186,][,1:2]
kutyafule <- function(erdoallapot,ordered_erdo_matrix,madarpontok_as_grid,plott) {
# ez csúf, mert csak erre a két plotra működik
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
## IDW
## http://www.geo.ut.ee/aasa/LOOM02331/R_idw_interpolation.html
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names")) [plott_range,]
erdoallapot_valtozo_df_spat <- erdoallapot_valtozo_df
coordinates(erdoallapot_valtozo_df_spat) = ~wgs84_lon + wgs84_lat
## Interpolation base on grid
lon1 <- erdoallapot_valtozo_df$wgs84_lon
#lon2 <- erdoallapot_valtozo_df$wgs84_lon[101:200]
lat1 <- erdoallapot_valtozo_df$wgs84_lat
#lat2 <- erdoallapot_valtozo_df$wgs84_lat[101:200]
#Define the grid extent:
x.range <- as.numeric(c(min(lon1)-diff(range(lon1))/10, max(lon1)+diff(range(lon1))/10))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(lat1)-diff(range(lat1))/10, max(lat1)+diff(range(lat1))/5))  # min/max longitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.001), y = seq(from = y.range[1],
to = y.range[2], by = 0.001))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
#debugger plot
#plot(grd, cex = 1.5, col = "grey")
#points(erdoallapot_valtozo_df_spat, pch = 1, col = "red", cex = 1)
## Interpolate surface and fix the output:
#idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat, newdata = grd,debug.level=0)  # apply idw model for the data
idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat[!is.na(erdoallapot_valtozo_df_spat$V4),],
newdata = grd,debug.level=0,na.action = na.omit)
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
## Plot the results:
#png(filename='var1.png',width=800,height=800)
## baeutiful ggplot figure
#ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
#    geom_point(data = erdoallapot_valtozo_df, aes(x = wgs84_lon, y = wgs84_lat), shape = 21,
#        colour = "red")
#dev.off()
## extract
bejaras <- as.matrix(coordinates(madarpontok_as_grid)[,1:2],ncol=2)
var1.matrix <- matrix(idw.output$var1.pred,ncol=length(unique(grd$y)),byrow=F)
## counter clockwise rotation
var1.matrix <- apply(t(var1.matrix),2,rev)
r <- raster(var1.matrix)
extent(r) <- c(x.range[1],x.range[2],y.range[1],y.range[2])
projection(r) <- CRS("+proj=longlat +datum=WGS84")
#plot(r)
extracted_erdo_data_on_birdpoints <- extract(r, bejaras)
return (extracted_erdo_data_on_birdpoints)
}
madarpontok <- readOGR("legykapokriginghez.shp")
ppont <- dbReadTable(conn,"ppont")
erdoallapot <- data.frame(ppont)
coordinates(erdoallapot) <- ~ wgs84_lon + wgs84_lat
madarpontok_as_grid <- coordinates(madarpontok)
#madarpontok<-data.frame(madarpontok_as_grid)
df.l_pred <- list()
# create matrix of lon,lat,ppont_azon
erdo_matrix <- cbind(coordinates( erdoallapot )[,1:2],erdoallapot$ppont_azon)
erdo.df <- as.data.frame(erdo_matrix)
madar_matrix <- cbind(coordinates( madarpontok_as_grid )[,1:2],rownames(madarpontok))
# order by lon, lat
# to spatial separate the two forest area
#ordered_erdo_matrix <- erdo_matrix[order(erdo_matrix[,1],erdo_matrix[,2],decreasing=F),]
ordered_madar_matrix <- madar_matrix[order(madar_matrix[,1],madar_matrix[,2],decreasing=F),]
madar1szv<-ordered_madar_matrix[1:87,][,1:2]
madar2p<-ordered_madar_matrix[88:186,][,1:2]
kutyafule <- function(erdoallapot,ordered_erdo_matrix,madarpontok_as_grid,plott) {
# ez csúf, mert csak erre a két plotra működik
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
## IDW
## http://www.geo.ut.ee/aasa/LOOM02331/R_idw_interpolation.html
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names")) [plott_range,]
erdoallapot_valtozo_df_spat <- erdoallapot_valtozo_df
coordinates(erdoallapot_valtozo_df_spat) = ~wgs84_lon + wgs84_lat
## Interpolation base on grid
lon1 <- erdoallapot_valtozo_df$wgs84_lon
#lon2 <- erdoallapot_valtozo_df$wgs84_lon[101:200]
lat1 <- erdoallapot_valtozo_df$wgs84_lat
#lat2 <- erdoallapot_valtozo_df$wgs84_lat[101:200]
#Define the grid extent:
x.range <- as.numeric(c(min(lon1)-diff(range(lon1))/10, max(lon1)+diff(range(lon1))/10))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(lat1)-diff(range(lat1))/10, max(lat1)+diff(range(lat1))/5))  # min/max longitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.001), y = seq(from = y.range[1],
to = y.range[2], by = 0.001))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
#debugger plot
#plot(grd, cex = 1.5, col = "grey")
#points(erdoallapot_valtozo_df_spat, pch = 1, col = "red", cex = 1)
## Interpolate surface and fix the output:
#idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat, newdata = grd,debug.level=0)  # apply idw model for the data
idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat[!is.na(erdoallapot_valtozo_df_spat$V4),],
newdata = grd,debug.level=0,na.action = na.omit)
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
## Plot the results:
#png(filename='var1.png',width=800,height=800)
## baeutiful ggplot figure
#ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
#    geom_point(data = erdoallapot_valtozo_df, aes(x = wgs84_lon, y = wgs84_lat), shape = 21,
#        colour = "red")
#dev.off()
## extract
bejaras <- as.matrix(coordinates(madarpontok_as_grid)[,1:2],ncol=2)
var1.matrix <- matrix(idw.output$var1.pred,ncol=length(unique(grd$y)),byrow=F)
## counter clockwise rotation
var1.matrix <- apply(t(var1.matrix),2,rev)
r <- raster(var1.matrix)
extent(r) <- c(x.range[1],x.range[2],y.range[1],y.range[2])
projection(r) <- CRS("+proj=longlat +datum=WGS84")
#plot(r)
extracted_erdo_data_on_birdpoints <- extract(r, bejaras)
return (extracted_erdo_data_on_birdpoints)
}
library(sp)
library(maptools)
library(gstat)
library(dplyr)
library(ggplot2)
library(raster)
madarpontok <- readOGR("legykapokriginghez.shp")
ppont <- dbReadTable(conn,"ppont")
erdoallapot <- data.frame(ppont)
coordinates(erdoallapot) <- ~ wgs84_lon + wgs84_lat
madarpontok_as_grid <- coordinates(madarpontok)
#madarpontok<-data.frame(madarpontok_as_grid)
df.l_pred <- list()
# create matrix of lon,lat,ppont_azon
erdo_matrix <- cbind(coordinates( erdoallapot )[,1:2],erdoallapot$ppont_azon)
erdo.df <- as.data.frame(erdo_matrix)
madar_matrix <- cbind(coordinates( madarpontok_as_grid )[,1:2],rownames(madarpontok))
# order by lon, lat
# to spatial separate the two forest area
#ordered_erdo_matrix <- erdo_matrix[order(erdo_matrix[,1],erdo_matrix[,2],decreasing=F),]
ordered_madar_matrix <- madar_matrix[order(madar_matrix[,1],madar_matrix[,2],decreasing=F),]
madar1szv<-ordered_madar_matrix[1:87,][,1:2]
madar2p<-ordered_madar_matrix[88:186,][,1:2]
for (m in c("madar1szv","madar2p")) {
madar <- eval(parse(text=paste(m)))
temp.pred <- list()
# "fa"        "mikrohab"  "mpont"     "lagyszaru" "cserje"
for ( i in names(env.l)) {
erdoallapot$varr <- NULL
j.df <- data.frame()
env.l[[i]]$ppont <- as.numeric(rownames(env.l[[i]]))
env.l[[i]] <- merge(env.l[[i]], erdo.df, by.x="ppont",by.y="V3")
print(i)
for (j in names(env.l[[i]])) {
# meuse
# WKT, VAR
#print(rownames(env.l[[i]] ))
#erdoallapot$varr[erdoallapot$ppont_azon %in% env.l[[i]]$ppont_azon] <- env.l[[i]][[j]]
#erdoallapot$varr[ erdoallapot$ppont_azon %in% as.numeric(rownames(env.l[[i]])) ] <- env.l[[i]][[j]]
#j.df <- kutyafule(erdoallapot,ordered_erdo_matrix,madar,m)
j.df <- kutyafule(env.l[[i]][[j]],madar,m)
temp.pred[[i]][[j]] <- j.df
}
#print(df.l_pred[[i]])
}
df.l_pred[[m]] <- temp.pred
}
kutyafule <- function(erdoallapot, ordered_erdo_matrix, madarpontok_as_grid, plott) {
# ez csúf, mert csak erre a két plotra működik
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
## IDW
## http://www.geo.ut.ee/aasa/LOOM02331/R_idw_interpolation.html
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names"))
erdoallapot_valtozo_df_spat <- erdoallapot_valtozo_df
coordinates(erdoallapot_valtozo_df_spat) = ~wgs84_lon + wgs84_lat
## Interpolation base on grid
lon1 <- erdoallapot_valtozo_df$wgs84_lon
#lon2 <- erdoallapot_valtozo_df$wgs84_lon[101:200]
lat1 <- erdoallapot_valtozo_df$wgs84_lat
#lat2 <- erdoallapot_valtozo_df$wgs84_lat[101:200]
#Define the grid extent:
x.range <- as.numeric(c(min(lon1)-diff(range(lon1))/10, max(lon1)+diff(range(lon1))/10))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(lat1)-diff(range(lat1))/10, max(lat1)+diff(range(lat1))/5))  # min/max longitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.001), y = seq(from = y.range[1],
to = y.range[2], by = 0.001))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
#debugger plot
#plot(grd, cex = 1.5, col = "grey")
#points(erdoallapot_valtozo_df_spat, pch = 1, col = "red", cex = 1)
## Interpolate surface and fix the output:
#idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat, newdata = grd,debug.level=0)  # apply idw model for the data
idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat[!is.na(erdoallapot_valtozo_df_spat$V4),],
newdata = grd,debug.level=0,na.action = na.omit)
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
## Plot the results:
#png(filename='var1.png',width=800,height=800)
## baeutiful ggplot figure
#ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
#    geom_point(data = erdoallapot_valtozo_df, aes(x = wgs84_lon, y = wgs84_lat), shape = 21,
#        colour = "red")
#dev.off()
## extract
bejaras <- as.matrix(coordinates(madarpontok_as_grid)[,1:2],ncol=2)
var1.matrix <- matrix(idw.output$var1.pred,ncol=length(unique(grd$y)),byrow=F)
## counter clockwise rotation
var1.matrix <- apply(t(var1.matrix),2,rev)
r <- raster(var1.matrix)
extent(r) <- c(x.range[1],x.range[2],y.range[1],y.range[2])
projection(r) <- CRS("+proj=longlat +datum=WGS84")
#plot(r)
extracted_erdo_data_on_birdpoints <- extract(r, bejaras)
return (extracted_erdo_data_on_birdpoints)
}
madarpontok <- readOGR("legykapokriginghez.shp")
ppont <- dbReadTable(conn,"ppont")
erdoallapot <- data.frame(ppont)
coordinates(erdoallapot) <- ~ wgs84_lon + wgs84_lat
madarpontok_as_grid <- coordinates(madarpontok)
#madarpontok<-data.frame(madarpontok_as_grid)
df.l_pred <- list()
# create matrix of lon,lat,ppont_azon
erdo_matrix <- cbind(coordinates( erdoallapot )[,1:2],erdoallapot$ppont_azon)
erdo.df <- as.data.frame(erdo_matrix)
madar_matrix <- cbind(coordinates( madarpontok_as_grid )[,1:2],rownames(madarpontok))
# order by lon, lat
# to spatial separate the two forest area
#ordered_erdo_matrix <- erdo_matrix[order(erdo_matrix[,1],erdo_matrix[,2],decreasing=F),]
ordered_madar_matrix <- madar_matrix[order(madar_matrix[,1],madar_matrix[,2],decreasing=F),]
madar1szv<-ordered_madar_matrix[1:87,][,1:2]
madar2p<-ordered_madar_matrix[88:186,][,1:2]
for (m in c("madar1szv","madar2p")) {
madar <- eval(parse(text=paste(m)))
temp.pred <- list()
# "fa"        "mikrohab"  "mpont"     "lagyszaru" "cserje"
for ( i in names(env.l)) {
erdoallapot$varr <- NULL
j.df <- data.frame()
env.l[[i]]$ppont <- as.numeric(rownames(env.l[[i]]))
env.l[[i]] <- merge(env.l[[i]], erdo.df, by.x="ppont",by.y="V3")
print(i)
for (j in names(env.l[[i]])) {
# meuse
# WKT, VAR
#print(rownames(env.l[[i]] ))
#erdoallapot$varr[erdoallapot$ppont_azon %in% env.l[[i]]$ppont_azon] <- env.l[[i]][[j]]
#erdoallapot$varr[ erdoallapot$ppont_azon %in% as.numeric(rownames(env.l[[i]])) ] <- env.l[[i]][[j]]
#j.df <- kutyafule(erdoallapot,ordered_erdo_matrix,madar,m)
j.df <- kutyafule(env.l[[i]][[j]],madar,m)
temp.pred[[i]][[j]] <- j.df
}
#print(df.l_pred[[i]])
}
df.l_pred[[m]] <- temp.pred
}
kutyafule <- function(erdoallapot, ordered_erdo_matrix, madarpontok_as_grid, plott) {
# ez csúf, mert csak erre a két plotra működik
# if (plott == 'madar1szv') {
#     plott_range <- 1:100
# } else {
#     plott_range <- 101:200
# }
## IDW
## http://www.geo.ut.ee/aasa/LOOM02331/R_idw_interpolation.html
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names"))
erdoallapot_valtozo_df_spat <- erdoallapot_valtozo_df
coordinates(erdoallapot_valtozo_df_spat) = ~wgs84_lon + wgs84_lat
## Interpolation base on grid
lon1 <- erdoallapot_valtozo_df$wgs84_lon
#lon2 <- erdoallapot_valtozo_df$wgs84_lon[101:200]
lat1 <- erdoallapot_valtozo_df$wgs84_lat
#lat2 <- erdoallapot_valtozo_df$wgs84_lat[101:200]
#Define the grid extent:
x.range <- as.numeric(c(min(lon1)-diff(range(lon1))/10, max(lon1)+diff(range(lon1))/10))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(lat1)-diff(range(lat1))/10, max(lat1)+diff(range(lat1))/5))  # min/max longitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.001), y = seq(from = y.range[1],
to = y.range[2], by = 0.001))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
#debugger plot
#plot(grd, cex = 1.5, col = "grey")
#points(erdoallapot_valtozo_df_spat, pch = 1, col = "red", cex = 1)
## Interpolate surface and fix the output:
#idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat, newdata = grd,debug.level=0)  # apply idw model for the data
idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat[!is.na(erdoallapot_valtozo_df_spat$V4),],
newdata = grd,debug.level=0,na.action = na.omit)
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
## Plot the results:
#png(filename='var1.png',width=800,height=800)
## baeutiful ggplot figure
#ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
#    geom_point(data = erdoallapot_valtozo_df, aes(x = wgs84_lon, y = wgs84_lat), shape = 21,
#        colour = "red")
#dev.off()
## extract
bejaras <- as.matrix(coordinates(madarpontok_as_grid)[,1:2],ncol=2)
var1.matrix <- matrix(idw.output$var1.pred,ncol=length(unique(grd$y)),byrow=F)
## counter clockwise rotation
var1.matrix <- apply(t(var1.matrix),2,rev)
r <- raster(var1.matrix)
extent(r) <- c(x.range[1],x.range[2],y.range[1],y.range[2])
projection(r) <- CRS("+proj=longlat +datum=WGS84")
#plot(r)
extracted_erdo_data_on_birdpoints <- extract(r, bejaras)
return (extracted_erdo_data_on_birdpoints)
}
library(sp)
library(maptools)
library(gstat)
library(dplyr)
library(ggplot2)
library(raster)
#Sys.setlocale(category = "LC_ALL", locale = "C")
madarpontok <- readOGR("legykapokriginghez.shp")
ppont <- dbReadTable(conn,"ppont")
erdoallapot <- data.frame(ppont)
coordinates(erdoallapot) <- ~ wgs84_lon + wgs84_lat
madarpontok_as_grid <- coordinates(madarpontok)
#madarpontok<-data.frame(madarpontok_as_grid)
df.l_pred <- list()
# create matrix of lon,lat,ppont_azon
erdo_matrix <- cbind(coordinates( erdoallapot )[,1:2],erdoallapot$ppont_azon)
erdo.df <- as.data.frame(erdo_matrix)
madar_matrix <- cbind(coordinates( madarpontok_as_grid )[,1:2],rownames(madarpontok))
# order by lon, lat
# to spatial separate the two forest area
#ordered_erdo_matrix <- erdo_matrix[order(erdo_matrix[,1],erdo_matrix[,2],decreasing=F),]
ordered_madar_matrix <- madar_matrix[order(madar_matrix[,1],madar_matrix[,2],decreasing=F),]
madar1szv<-ordered_madar_matrix[1:87,][,1:2]
madar2p<-ordered_madar_matrix[88:186,][,1:2]
for (m in c("madar1szv","madar2p")) {
madar <- eval(parse(text=paste(m)))
temp.pred <- list()
# "fa"        "mikrohab"  "mpont"     "lagyszaru" "cserje"
for ( i in names(env.l)) {
erdoallapot$varr <- NULL
j.df <- data.frame()
env.l[[i]]$ppont <- as.numeric(rownames(env.l[[i]]))
env.l[[i]] <- merge(env.l[[i]], erdo.df, by.x="ppont",by.y="V3")
print(i)
for (j in names(env.l[[i]])) {
# meuse
# WKT, VAR
#print(rownames(env.l[[i]] ))
#erdoallapot$varr[erdoallapot$ppont_azon %in% env.l[[i]]$ppont_azon] <- env.l[[i]][[j]]
#erdoallapot$varr[ erdoallapot$ppont_azon %in% as.numeric(rownames(env.l[[i]])) ] <- env.l[[i]][[j]]
#j.df <- kutyafule(erdoallapot,ordered_erdo_matrix,madar,m)
j.df <- kutyafule(env.l[[i]][[j]],madar,m)
temp.pred[[i]][[j]] <- j.df
}
#print(df.l_pred[[i]])
}
df.l_pred[[m]] <- temp.pred
}
kutyafule <- function(env.l[[i]], madarpontok_as_grid, plott) {
# ez csC:f, mert csak erre a kC)t plotra mE1kC6dik
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
# ez csúf, mert csak erre a két plotra működik
# if (plott == 'madar1szv') {
#     plott_range <- 1:100
# } else {
#     plott_range <- 101:200
# }
## IDW
## http://www.geo.ut.ee/aasa/LOOM02331/R_idw_interpolation.html
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names"))
erdoallapot_valtozo_df_spat <- erdoallapot_valtozo_df
coordinates(erdoallapot_valtozo_df_spat) = ~wgs84_lon + wgs84_lat
## Interpolation base on grid
lon1 <- erdoallapot_valtozo_df$wgs84_lon
#lon2 <- erdoallapot_valtozo_df$wgs84_lon[101:200]
lat1 <- erdoallapot_valtozo_df$wgs84_lat
#lat2 <- erdoallapot_valtozo_df$wgs84_lat[101:200]
#Define the grid extent:
x.range <- as.numeric(c(min(lon1)-diff(range(lon1))/10, max(lon1)+diff(range(lon1))/10))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(lat1)-diff(range(lat1))/10, max(lat1)+diff(range(lat1))/5))  # min/max longitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.001), y = seq(from = y.range[1],
to = y.range[2], by = 0.001))  # expand points to grid
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
#debugger plot
#plot(grd, cex = 1.5, col = "grey")
#points(erdoallapot_valtozo_df_spat, pch = 1, col = "red", cex = 1)
## Interpolate surface and fix the output:
#idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat, newdata = grd,debug.level=0)  # apply idw model for the data
idw <- idw(formula = V4 ~ 1, locations = erdoallapot_valtozo_df_spat[!is.na(erdoallapot_valtozo_df_spat$V4),],
newdata = grd,debug.level=0,na.action = na.omit)
## [inverse distance weighted interpolation]
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
## Plot the results:
#png(filename='var1.png',width=800,height=800)
## baeutiful ggplot figure
#ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
#    geom_point(data = erdoallapot_valtozo_df, aes(x = wgs84_lon, y = wgs84_lat), shape = 21,
#        colour = "red")
#dev.off()
## extract
bejaras <- as.matrix(coordinates(madarpontok_as_grid)[,1:2],ncol=2)
var1.matrix <- matrix(idw.output$var1.pred,ncol=length(unique(grd$y)),byrow=F)
## counter clockwise rotation
var1.matrix <- apply(t(var1.matrix),2,rev)
r <- raster(var1.matrix)
extent(r) <- c(x.range[1],x.range[2],y.range[1],y.range[2])
projection(r) <- CRS("+proj=longlat +datum=WGS84")
#plot(r)
extracted_erdo_data_on_birdpoints <- extract(r, bejaras)
return (extracted_erdo_data_on_birdpoints)
}
i<-env.l$mpont
i <- env.l$mpont
i <- env.l$mpont
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
plott <- 'madar1szv'
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
plott <- 'madar1szv'
if (plott == 'madar1szv') {
plott_range <- 1:100
} else {
plott_range <- 101:200
}
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names")) [plott_range,]
i <- env.l$mpont
env.l[[i]]$wgs84_lat
env.l[[i]]$wgs84_lat
env.l$mpont
erdoallapot_valtozo_df  <- as.data.frame(merge(env.l[[i]][[j]], env.l[[i]]$wgs84_lat, by = "row.names")) [plott_range,]
env.l
env.l$mpont
env.l$mpont
wgs84_lat
env.l[[7]]
env.l[[6]]
env.l[[7]][[1]]
class(env.l)
#install.packages('xlsx')
library(xlsx)
library(ggplot2)
library(reshape2)
#setwd()
data <- read.xlsx(file = "../Desktop/Untitled Folder/Sali/data_fligth_feather_asym.xls", sheetName = "Sheet1")
data <- data[order(data$Flight.type), c(11,18:23,25:30)]
for (i in 1:3) {
data <- cbind(data, data[, i + 1] - data[, i + 4])
}
for (i in 1:3) {
data <- cbind(data, data[, i + 7] - data[, i + 10])
}
colnames(data) [14:19] <- c("P3_asym_base", "P3_asym_middle", "P3_asym_tip", "P10_asym_base", "P10_asym_middle", "P10_asym_tip")
data_mean <- sapply(data[, 2:19], function (x) {by(x, as.factor(data$Flight.type), mean)}, simplify = T)
data_sd <- sapply(data[, 2:19], function (x) {by(x, as.factor(data$Flight.type), function (y) {sd(y)/sqrt(length(y))})}, simplify = T)
target <- c('2a', '2c', '1', '3')
data_mean <- data_mean[match(target, rownames(data_mean)), ]
data_se <- data_sd[match(target, rownames(data_sd)), ]
rownames(data_mean) = c('Vit', 'Sik', 'Csap', 'Enek')
rownames(data_se) = c('Vit', 'Sik', 'Csap', 'Enek')
data_mean_melt <- melt(data_mean)
data_se_melt <- melt(data_se)
data_melt <- data.frame(data_mean_melt, data_mean_melt[, 3] + data_se_melt[, 3], data_mean_melt[, 3] - data_se_melt[, 3])
colnames(data_melt)[4:5] <- c('max_se', 'min_se')
for (i in 1:6) {
#jp(filename=paste('nev_', i, sep = ''))
print(
ggplot(data_melt[c((((i - 1) * 12) + 1) : (i * 12)), ], aes(x = Var1, y = value, group = Var2, col = Var2)) +
geom_point(aes(shape = Var2), size = 4, position = position_dodge(width=0.5)) +
geom_line(position = position_dodge(width=0.5)) +
geom_errorbar(aes(ymin = min_se, ymax = max_se), width = 0.25, position = position_dodge(width=0.5)) +
labs(x = 'Repules Tipusa', y = 'Agszog Szimmetria') +
theme(legend.title = element_blank())
)
#dev.off()
}
